{"version":3,"sources":["components/VeriPhone.js","App.js","reportWebVitals.js","index.js"],"names":["VeriPhone","useState","mobileNumber","setMobileNumber","isVisible","setIsVisible","phoneData","setPhoneData","isLoading","setIsLoading","className","Card","centered","Content","Input","icon","placeholder","onChange","e","mobile","target","value","Button","secondary","onClick","axios","get","then","item","data","phone_valid","toast","error","Icon","name","Loader","active","inline","status","carrier","country","country_code","international_number","phone_region","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+TAOe,SAASA,IAAa,IAAD,EACQC,mBAAS,MADjB,mBACzBC,EADyB,KACXC,EADW,OAEEF,oBAAS,GAFX,mBAEzBG,EAFyB,KAEdC,EAFc,OAGEJ,mBAAS,IAHX,mBAGzBK,EAHyB,KAGdC,EAHc,OAIEN,oBAAS,GAJX,mBAIzBO,EAJyB,KAIdC,EAJc,KA4BhC,OACI,sBAAKC,UAAU,WAAf,UACI,cAAC,IAAD,IACA,cAACC,EAAA,EAAD,CAAMC,UAAQ,EAACF,UAAU,YAAzB,SACI,eAACC,EAAA,EAAKE,QAAN,WACI,qBAAKH,UAAU,kBAAf,SACI,cAACI,EAAA,EAAD,CAAOC,KAAK,SACRC,YAAY,wBACZC,SAAU,SAACC,GAAD,OA/BPC,EA+BgCD,EAAEE,OAAOC,MA9BhElB,EAAgBgB,QAED,KAAXA,GACAd,GAAa,IAJK,IAACc,OAkCX,qBAAKT,UAAU,gBAAf,SACI,eAACY,EAAA,EAAD,CAAQC,WAAS,EAACC,QA3BjB,WACjBf,GAAa,GACbgB,IAAMC,IAAN,UAhBU,qCAgBV,kBAAmCxB,EAAnC,gBAjBK,qCAkBAyB,MAAK,SAACC,GACHrB,EAAaqB,EAAKC,MACbD,EAAKC,KAAKC,aAKXzB,GAAa,GACbI,GAAa,KALbsB,IAAMC,MAAM,6BACZvB,GAAa,QAoBT,UACI,cAACwB,EAAA,EAAD,CAAMC,KAAK,UADf,2BAIH9B,EACII,EAiBG,sBAAKE,UAAU,mBAAf,UACI,cAACyB,EAAA,EAAD,CAAQC,QAAM,EAACC,OAAO,aACtB,4DAlBsB,IAA1B/B,EAAUwB,YACN,8BACI,yDAGJ,sBAAKpB,UAAU,aAAf,UACI,0CAAY,sBAAMA,UAAU,aAAhB,SAA8BJ,EAAUgC,YACpD,2CAAa,sBAAM5B,UAAU,aAAhB,SAA8BJ,EAAUiC,aACrD,2CAAa,sBAAM7B,UAAU,aAAhB,SAA8BJ,EAAUkC,aACrD,gDAAkB,sBAAM9B,UAAU,aAAhB,SAA8BJ,EAAUmC,kBAC1D,wDAA0B,sBAAM/B,UAAU,aAAhB,SAA8BJ,EAAUoC,0BAClE,gDAAkB,sBAAMhC,UAAU,aAAhB,SAA8BJ,EAAUqC,kBAC1D,4CAAc,sBAAMjC,UAAU,aAAhB,UAAwD,IAA1BJ,EAAUwB,YAAuB,QAAU,kBAUnG,gCACI,8DACA,2HClEbc,MARf,WACE,OACE,qBAAKlC,UAAU,MAAf,SACE,cAACV,EAAD,OCMS6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.afafd589.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport React, { useState } from 'react';\r\nimport { Card, Input, Button, Icon, Loader } from 'semantic-ui-react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nconst API_KEY = `9B549DB9A2C64A60958AEBFA7E24708A`;\r\nconst API_ENDPOINT = `https://api.veriphone.io/v2/verify`;\r\nexport default function VeriPhone() {\r\n    const [mobileNumber, setMobileNumber] = useState(null);\r\n    const [isVisible, setIsVisible] = useState(false);\r\n    const [phoneData, setPhoneData] = useState({});\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const checkMobileNumber = (mobile) => {\r\n        setMobileNumber(mobile);\r\n\r\n        if (mobile === '') {\r\n            setIsVisible(false)\r\n        }\r\n    }\r\n\r\n    const verifyMobile = () => {\r\n        setIsLoading(true)\r\n        axios.get(`${API_ENDPOINT}?phone=${mobileNumber}&key=${API_KEY}`)\r\n            .then((item) => {\r\n                setPhoneData(item.data);\r\n                if (!item.data.phone_valid) {\r\n                    toast.error(\"Phone Number is Not Valid\");\r\n                    setIsLoading(false)\r\n                }\r\n                else {\r\n                    setIsVisible(true)\r\n                    setIsLoading(false)\r\n                }\r\n            })\r\n    }\r\n    return (\r\n        <div className=\"app-body\">\r\n            <ToastContainer />\r\n            <Card centered className=\"card-body\">\r\n                <Card.Content>\r\n                    <div className=\"input-container\">\r\n                        <Input icon='search'\r\n                            placeholder='Type a Phone Number..'\r\n                            onChange={(e) => checkMobileNumber(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"btn-container\">\r\n                        <Button secondary onClick={verifyMobile}>\r\n                            <Icon name='phone' />Check Mobile Number\r\n                        </Button>\r\n                    </div>\r\n                    {isVisible ? (\r\n                        !isLoading ? (\r\n                            phoneData.phone_valid !== true ? (\r\n                                <div>\r\n                                    <h3>Invalid Mobile Number</h3>\r\n                                </div>\r\n                            ) : (\r\n                                <div className=\"phone-data\">\r\n                                    <h3>Status: <span className=\"phone-span\">{phoneData.status}</span></h3>\r\n                                    <h3>Carrier: <span className=\"phone-span\">{phoneData.carrier}</span></h3>\r\n                                    <h3>Country: <span className=\"phone-span\">{phoneData.country}</span></h3>\r\n                                    <h3>Country Code: <span className=\"phone-span\">{phoneData.country_code}</span></h3>\r\n                                    <h3>International Number: <span className=\"phone-span\">{phoneData.international_number}</span></h3>\r\n                                    <h3>Phone Region: <span className=\"phone-span\">{phoneData.phone_region}</span></h3>\r\n                                    <h3>Validity: <span className=\"phone-span\">{phoneData.phone_valid === true ? 'Valid' : 'Invalid'}</span></h3>\r\n                                </div>\r\n                            )\r\n                        ) : (\r\n                            <div className=\"loader-container\">\r\n                                <Loader active inline='centered' />\r\n                                <h3>Loading..Please Wait..</h3>\r\n                            </div>\r\n                        )\r\n                    ) : (\r\n                        <div>\r\n                            <h3>Check Mobile Number Validity</h3>\r\n                            <p>Check the Mobile Number Validity of a Mobile Number. Just the the Mobile Number</p>\r\n                        </div>\r\n                    )}\r\n                </Card.Content>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport VeriPhone from './components/VeriPhone';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <VeriPhone/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}